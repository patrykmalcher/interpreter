-- Programs ----------------------------------

entrypoints Program ;

Prog. Program ::= [Fun] ;

FunDef. Fun ::= Type Ident "(" [Arg] ")" Block ;

separator nonempty Fun "" ;

ArgVar. Arg ::= "var" Type Ident ;

ArgVal. Arg ::= Type Ident ;

separator  Arg "," ;

-- Statements --------------------------------

Bl. Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

BlockStmt. Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass. Stmt ::= Ident "=" Expr ";" ;

Ret. Stmt ::= "return" Expr ";" ;

If. Stmt ::= "if" "(" Expr ")" Stmt  ;

IfElse. Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While. Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

FSt. Stmt ::= Fun ;

-- Types -------------------------------------

Int.  Type ::= "int" ;

Str.  Type ::= "string" ;

Bool. Type ::= "boolean" ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;
