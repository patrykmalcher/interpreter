-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Fox.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Fox.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Fox.Abs.Ident -> Result
transIdent x = case x of
  Fox.Abs.Ident string -> failure x

transProgram :: Fox.Abs.Program -> Result
transProgram x = case x of
  Fox.Abs.Prog stmts -> failure x

transFun :: Fox.Abs.Fun -> Result
transFun x = case x of
  Fox.Abs.FunDef type_ ident args block -> failure x

transArg :: Fox.Abs.Arg -> Result
transArg x = case x of
  Fox.Abs.ArgVar type_ ident -> failure x
  Fox.Abs.ArgVal type_ ident -> failure x

transBlock :: Fox.Abs.Block -> Result
transBlock x = case x of
  Fox.Abs.Bl stmts -> failure x

transStmt :: Fox.Abs.Stmt -> Result
transStmt x = case x of
  Fox.Abs.BlockStmt block -> failure x
  Fox.Abs.Decl type_ items -> failure x
  Fox.Abs.Ass ident expr -> failure x
  Fox.Abs.Ret expr -> failure x
  Fox.Abs.If expr stmt -> failure x
  Fox.Abs.IfElse expr stmt1 stmt2 -> failure x
  Fox.Abs.While expr stmt -> failure x
  Fox.Abs.SExp expr -> failure x
  Fox.Abs.FSt fun -> failure x

transItem :: Fox.Abs.Item -> Result
transItem x = case x of
  Fox.Abs.NoInit ident -> failure x
  Fox.Abs.Init ident expr -> failure x

transType :: Fox.Abs.Type -> Result
transType x = case x of
  Fox.Abs.Int -> failure x
  Fox.Abs.Str -> failure x
  Fox.Abs.Bool -> failure x

transExpr :: Fox.Abs.Expr -> Result
transExpr x = case x of
  Fox.Abs.EVar ident -> failure x
  Fox.Abs.ELitInt integer -> failure x
  Fox.Abs.ELitTrue -> failure x
  Fox.Abs.ELitFalse -> failure x
  Fox.Abs.EApp ident exprs -> failure x
  Fox.Abs.EString string -> failure x
  Fox.Abs.Neg expr -> failure x
  Fox.Abs.Not expr -> failure x
  Fox.Abs.EMul expr1 mulop expr2 -> failure x
  Fox.Abs.EAdd expr1 addop expr2 -> failure x
  Fox.Abs.ERel expr1 relop expr2 -> failure x
  Fox.Abs.EAnd expr1 expr2 -> failure x
  Fox.Abs.EOr expr1 expr2 -> failure x

transAddOp :: Fox.Abs.AddOp -> Result
transAddOp x = case x of
  Fox.Abs.Plus -> failure x
  Fox.Abs.Minus -> failure x

transMulOp :: Fox.Abs.MulOp -> Result
transMulOp x = case x of
  Fox.Abs.Times -> failure x
  Fox.Abs.Div -> failure x
  Fox.Abs.Mod -> failure x

transRelOp :: Fox.Abs.RelOp -> Result
transRelOp x = case x of
  Fox.Abs.LTH -> failure x
  Fox.Abs.LE -> failure x
  Fox.Abs.GTH -> failure x
  Fox.Abs.GE -> failure x
  Fox.Abs.EQU -> failure x
  Fox.Abs.NE -> failure x
